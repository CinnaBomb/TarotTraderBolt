import React, { useState } from 'react';
import { X, Eye, EyeOff } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface AuthModalProps {
  onClose: () => void;
  isMainLogin?: boolean;
}

const AuthModal: React.FC<AuthModalProps> = ({ onClose, isMainLogin = false }) => {
  const [isSignUp, setIsSignUp] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: ''
  });
  
  const { signIn, signUp, isLoading, user } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    try {
      if (isSignUp) {
        await signUp(formData.email, formData.password, formData.name);
        setSuccess('Account created successfully! Please check your email to verify your account.');
      } else {
        await signIn(formData.email, formData.password);
        setSuccess('Signed in successfully!');
      }
      
      if (!isMainLogin) {
        onClose();
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      console.log('Error message:', error.message);
      console.log('Setting error state...');
      
      // Handle specific error messages
      if (error.message?.includes('Invalid login credentials')) {
        if (isSignUp) {
          setError('Invalid email or password. Please check your credentials and try again.');
        } else {
          setError('‚ùå Account not found! This email doesn\'t exist in our system. Please click "Sign Up" below to create a new account.');
        }
      } else {
        setError('An unexpected error occurred. Please try again.');
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // If user is already logged in and this is not the main login, show profile info
  if (user && !isMainLogin) {
    return (
      <div className="p-6 space-y-4">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-yellow-400">Profile</h2>
          <button 
            onClick={onClose}
            className="text-gray-400 hover:text-gray-300"
            aria-label="Close profile modal"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">Email</label>
            <p className="text-white">{user.email}</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">Name</label>
            <p className="text-white">{user.name}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      className={isMainLogin ? "p-6 space-y-6" : "fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"}
      role="dialog"
      aria-modal="true"
      aria-labelledby="auth-modal-title"
    >
      <div 
        className={isMainLogin ? "" : "bg-slate-900 rounded-xl p-6 w-full max-w-md"}
        role="document"
      >
        {!isMainLogin && (
          <div className="flex justify-between items-center mb-6">
            <h2 id="auth-modal-title" className="text-xl font-bold text-yellow-400">{isSignUp ? 'Create Account' : 'Login'}</h2>
            <button 
              onClick={onClose}
              className="text-gray-400 hover:text-gray-300"
              aria-label="Close authentication modal"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        )}

        {error && (
          <div className="bg-red-500/10 border border-red-500 rounded-lg p-3 mb-6">
            <p className="text-red-500 text-sm">{error}</p>
          </div>
        )}

        {success && (
          <div className="bg-green-500/10 border border-green-500 rounded-lg p-3 mb-6">
            <p className="text-green-500 text-sm">{success}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4" aria-label="Authentication form">
          {isSignUp && (
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-400 mb-1">
                Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-400"
                required={isSignUp}
                aria-label="Name input"
              />
            </div>
          )}

          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-400 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-400"
              required
              aria-label="Email input"
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-400 mb-1">
              Password
            </label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                className="w-full bg-slate-800 border border-slate-700 rounded-lg pl-4 pr-12 py-2 text-white focus:outline-none focus:border-yellow-400"
                required
                aria-label="Password input"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-300"
                aria-label={showPassword ? "Hide password" : "Show password"}
              >
                {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
              </button>
            </div>
          </div>

          <button
            type="submit"
            className="w-full bg-yellow-400 text-slate-900 py-2 px-4 rounded-lg font-medium hover:bg-yellow-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={isLoading}
            aria-label={isLoading ? "Processing authentication" : isSignUp ? "Create account" : "Log in"}
          >
            {isLoading ? 'Processing...' : 'Submit'}
          </button>

          <button
            type="button"
            onClick={() => setIsSignUp(!isSignUp)}
            className="w-full text-center text-sm text-gray-400 hover:text-gray-300"
            aria-label={isSignUp ? "Switch to login" : "Switch to signup"}
          >
            {isSignUp ? 'Already have an account? Login' : 'New here? Create Account'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default AuthModal;